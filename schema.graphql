type Wrappr @entity {
  id: ID! # address
  name: String!
  symbol: String!
  baseURI: String! 
  mintFee: BigInt!
  admin: Bytes!
  managers: [Manager!] @derivedFrom(field: "wrappr")
  collections: [Collection!] @derivedFrom(field: "wrappr")
}

type Collection @entity {
  id: ID!
  wrappr: Wrappr!
  collectionId: BigInt!
  owner: Bytes!
  transferability: Boolean
  permissioned: Boolean
  uri: String
  users: [User!] @derivedFrom(field: "collection")
}

type Manager @entity {
  id: ID!
  wrappr: Wrappr! 
  address: Bytes!
  active: Boolean!
}

# divide into account and users ?
type User @entity {
  id: ID! # wrappr contract address + collection ID + user address 
  collection: Collection!
  permission: Boolean
  amount: BigInt!
  uri: String
}

type Account @entity {
  id: ID! # wrappr contract address + account address 
  address: Bytes!
  approvals: [Approval!] @derivedFrom(field: "account")
}

type Approval @entity {
  id: ID! # wrappr contract address + account address + 'approval'
  account: Account!
  address: Bytes!
  approve: Boolean!
}
